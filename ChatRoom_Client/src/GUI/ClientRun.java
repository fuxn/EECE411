package GUI;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import Client.Client;
import Utilities.MessageQueue;

public class ClientRun {

	static GUI gui;
	static MessageQueue _queue;
	static MessageQueue _serverQueue;

	public static void main(String[] args) {
		// create a shared buffer where the GUI add the messages thet need to
		// be sent out by the main thread. The main thread stays in a loop
		// and when a new message shows up in the buffer it sends it out
		// to the chat server (using RMI)
		
		System.out.println("Please Enter Host Name : ");
		String host = null;
		 
		try{
		    BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));
		    String s = bufferRead.readLine();
	 
		    if(s != null && !s.trim().isEmpty())
		    	host = s;
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		
		System.out.println("Please Enter User Name : ");
		
		String user = null;
		 
		try{
		    BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));
		    String s = bufferRead.readLine();
	 
		    if(s != null && !s.trim().isEmpty())
		    	user = s;
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		
		_queue = new MessageQueue();

		// instantiate the GUI - in a new thread
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				gui = GUI.createAndShowGUI(_queue);
			}
		});

		// hack make sure the GUI instantioation is completed by the GUI thread
		// before the next call
		while (gui == null)
			Thread.currentThread().yield();

		// calling the GUI method that updates the text area of the GUI
		// NOTE: you might want to call the same method when a new chat message
		// arrives
		gui.addToTextArea("RemoteUser:> Sample of displaying remote maessage");

		// The code below serves as an example to show how the shares message
		// between the GUI and the main thread.
		// You will probably want to replace the code below with code that sits
		// in a loop,
		// waits for new messages to be entered by the user, and sends them to
		// the
		// chat server (using an RMI call)
		//
		// In addition you may want to add code that
		// * connects to the chat server and provides an object for callbacks
		// (so
		// that the server has a way to send messages generated by other users)
		// * implement the callback object which is called by the server
		// remotely
		// and, in turn, updates the local GUI

		Client client = null;
		try {
			client = new Client(user);
			if (!client.initializeClient(host)) {
				gui.addToTextArea("Connect to Server Failed..");
			} else {
				gui.addToTextArea("Connected to Server..");
			}
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		while (true) {
			String s;
			try {
				// wait until the user enters a new chat message
				s = _queue.dequeue();
			} catch (InterruptedException ie) {
				break;
			}

			// update the GUI with the message entered by the user
			gui.addToTextArea("Me:> " + s);

			// print it to System.out (or send it to the RMI server)
			if (client != null) {
				if (!client.post(s)) {
					gui.addToTextArea("Failed to connect to server, Reconnecting..");
					try {
						client.autoRetry();
					} catch (MalformedURLException e) {
						e.printStackTrace();
					} catch (RemoteException e) {
						e.printStackTrace();
					} catch (NotBoundException e) {
						e.printStackTrace();
					}
				}
			}

			_serverQueue = client.getMessageQueue();
			String message;
			try {
				// wait until the user enters a new chat message
				message = _serverQueue.dequeue();
			} catch (InterruptedException ie) {
				ie.printStackTrace();
				break;
			}

			// update the GUI with the message entered by the user
			gui.addToTextArea(message);

		} // end while loop
	}

}
