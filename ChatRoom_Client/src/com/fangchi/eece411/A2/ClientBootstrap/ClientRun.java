package com.fangchi.eece411.A2.ClientBootstrap;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import com.fangchi.eece411.A2.Client.Client;
import com.fangchi.eece411.A2.Utilities.MessageQueue;

public class ClientRun {

	static GUI gui;
	static MessageQueue _queue;
	static MessageQueue _serverQueue;

	static Client client;

	public static void main(String[] args) {

		// Promote user to enter host address & user name

		System.out.println("Please Enter Host Name : ");
		String host = null;

		try {
			BufferedReader bufferRead = new BufferedReader(
					new InputStreamReader(System.in));
			String s = bufferRead.readLine();

			if (s != null && !s.trim().isEmpty())
				host = s;
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Please Enter User Name : ");

		String user = null;

		try {
			BufferedReader bufferRead = new BufferedReader(
					new InputStreamReader(System.in));
			String s = bufferRead.readLine();

			if (s != null && !s.trim().isEmpty())
				user = s;
		} catch (IOException e) {
			e.printStackTrace();
		}

		// create a shared buffer where the GUI add the messages thet need to
		// be sent out by the main thread. The main thread stays in a loop
		// and when a new message shows up in the buffer it sends it out
		// to the chat server (using RMI)

		_queue = new MessageQueue();

		// instantiate the GUI - in a new thread
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				gui = GUI.createAndShowGUI(_queue);
			}
		});

		// hack make sure the GUI instantioation is completed by the GUI thread
		// before the next call
		while (gui == null)
			Thread.currentThread().yield();

		// calling the GUI method that updates the text area of the GUI
		// NOTE: you might want to call the same method when a new chat message
		// arrives
		gui.addToTextArea("RemoteUser:> Sample of displaying remote maessage");

		// The code below serves as an example to show how the shares message
		// between the GUI and the main thread.
		// You will probably want to replace the code below with code that sits
		// in a loop,
		// waits for new messages to be entered by the user, and sends them to
		// the
		// chat server (using an RMI call)
		//
		// In addition you may want to add code that
		// * connects to the chat server and provides an object for callbacks
		// (so
		// that the server has a way to send messages generated by other users)
		// * implement the callback object which is called by the server
		// remotely
		// and, in turn, updates the local GUI

		// Create a client instance and connect to server
		try {
			client = new Client(user);
			if (!client.initializeClient(host)) {
				gui.addToTextArea("Connect to Server Failed..");
			} else {
				gui.addToTextArea("Connected to Server..");
			}
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// create a thread which monitors the message queue, post messages to
		// server as soon as the user inputs message
		(new Thread(new Runnable() {
			@Override
			public void run() {
				while (true) {
					try {
						String message = _queue.dequeue();
						// wait until the user enters a new chat message
						// update the GUI with the message entered by the user
						gui.addToTextArea("Me:> " + message);
						// print it to System.out (or send it to the RMI server)
						if (client != null) {
							if (!client.post(message)) {
								gui.addToTextArea("Failed to connect to server, Reconnecting..");
								try {
									client.autoRetry();
								} catch (MalformedURLException e) {
									e.printStackTrace();
								} catch (RemoteException e) {
									e.printStackTrace();
								} catch (NotBoundException e) {
									e.printStackTrace();
								}
							}
						}
					} catch (InterruptedException ie) {
						break;
					}
				}
			}
		})).start();

		// Create a thread which monitors the message queue shared by client and
		// server, display messages sent by server
		_serverQueue = client.getMessageQueue();
		(new Thread(new Runnable() {
			@Override
			public void run() {
				while (true) {
					try {
						// wait until the server sends a new chat message
						// update the GUI with the message
						gui.addToTextArea(_serverQueue.dequeue());
					} catch (InterruptedException ie) {
						ie.printStackTrace();
						break;
					}
				}
			}

		})).start();

	}

}
